import mysql.connector

mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    password="muk3itd",
    database="onlineretailstore"
)

mycursor = mydb.cursor()

# embedded queries
query1= '''
    SELECT Product.ProductName, SUM(Cart.product_quantity) AS total_sold
    FROM Product
    JOIN Cart ON Product.ProductID = Cart.ProductID
    GROUP BY Product.ProductID
    ORDER BY total_sold DESC
    LIMIT 5
'''

query2 = '''
    SELECT Product.ProductName, AVG(Product.ProductReviews) AS avg_reviews
    FROM Product
    JOIN ProductCategory ON Product.categoryID = ProductCategory.CategoryID
    WHERE ProductCategory.CategoryName = 'Electronics'
    GROUP BY Product.ProductID
    HAVING AVG(Product.ProductReviews) > 4.0
    ORDER BY AVG(Product.ProductReviews) DESC
    LIMIT 10
'''
mycursor.execute(query1)
for result in mycursor:
    print(result)

print("===============================================================================================================")

mycursor.execute(query2)
for res in mycursor:
    print(res)

# ---------------------------------------------------------------------------------------------------------------------

# 2 triggers which will be run on mysql workbench

delimiter //
CREATE TRIGGER update_inventory
AFTER INSERT ON Cart
FOR EACH ROW
BEGIN
	UPDATE Product SET AvailableQty = AvailableQty - NEW.product_quantity
	WHERE ProductID = NEW.ProductID;
END; //

delimiter //
CREATE TRIGGER update_order_status
AFTER UPDATE ON Orders
FOR EACH ROW
BEGIN
    IF NEW.order_status = 'Delivered' THEN
        INSERT INTO OrderHistory (CustomerID, Order_id) VALUES (NEW.CustID, NEW.order_id);
    END IF;
END;//



DROP TRIGGER IF EXISTS update_inventory;
DROP TRIGGER IF EXISTS update_order_status;


---------------------------------------------------
select productname, categoryname, sum(availableqty)
from product,productcategory
where product.categoryid=productcategory.categoryid
group by productname,categoryname with rollup;

select order_status, month(order_date_time) as mon, sum(order_amount)
from orders
group by order_status, month(order_date_time) with rollup;

select productname, productbrand, sum(productprice)
from product
group by productname, productbrand with rollup
order by sum(productprice) desc;


select product_name, product_quantity, avg(cost)
from cart, product
where cart.productid=product.productid
group by product_name, product_quantity with rollup;
